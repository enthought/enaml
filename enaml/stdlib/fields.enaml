#------------------------------------------------------------------------------
#  Copyright (c) 2011, Enthought, Inc.
#  All rights reserved.
#------------------------------------------------------------------------------
""" Enaml Standard Library - Fields

This is a library of Enaml components deriving from the built-in Field.

"""
from abc import ABCMeta

from enaml.validation import (
    IntegralNumberValidator, RealNumberValidator, ComplexNumberValidator,
    IntValidator, LongValidator, FloatValidator, ComplexValidator,
    BinValidator, OctValidator, HexValidator, LongBinValidator, 
    LongOctValidator, LongHexValidator, IntegralNumberExpressionValidator,
    RealNumberExpressionValidator, ComplexNumberExpressionValidator,
    IntExpressionValidator, LongExpressionValidator, FloatExpressionValidator,
    ComplexExpressionValidator, BinExpressionValidator, OctExpressionValidator,
    HexExpressionValidator, LongBinExpressionValidator,
    LongOctExpressionValidator, LongHexExpressionValidator, NumberValidator,
)


#------------------------------------------------------------------------------
# Error Field
#------------------------------------------------------------------------------
#: The error color for the Error Fields. Defaults to 'error'.
ERROR_COLOR = 'error'


#: The unacceptable color for the Error Fields. Defaults to 'unacceptable'.
UNACCEPTABLE_COLOR = 'unacceptable'


#: The acceptable color for the Error Fields. Defaults to 'none'.
ACCEPTABLE_COLOR = 'none'


enamldef ErrorField(Field):
    """ An ErrorField updates its background color based on validation
    state and error state.
    
    """
    bgcolor << ERROR_COLOR if error else UNACCEPTABLE_COLOR if not acceptable else ACCEPTABLE_COLOR


#------------------------------------------------------------------------------
# Base Number Field
#------------------------------------------------------------------------------
class NumberValidatorMetaType(type):
    """ A meta type which validates than an "instance" is a subclass of
    NumberValidator.

    """
    def __instancecheck__(cls, inst):
        return issubclass(inst, NumberValidator)


class NumberValidatorType(object):
    """ A class which uses metaclass machinery to validate that an object
    is a subclass of NumberValidator.

    """
    __metaclass__ = NumberValidatorMetaType


enamldef NumberField(ErrorField):
    """ NumberField serves as a base prototype for the other concrete
    number fields. It adds the user attributes 'low', 'high', and
    'precision', which when changed will cause a new 'validator_class'
    to be instantiatied and used as the validator for the field.

    """
    attr validator_class : NumberValidatorType
    attr low = None
    attr high = None
    attr precision: int = -1
    validator << validator_class(low=low, high=high, precision=precision)


#------------------------------------------------------------------------------
# Number Fields
#------------------------------------------------------------------------------
enamldef IntegralNumberField(NumberField):
    validator_class = IntegralNumberValidator
    value = 0


enamldef RealNumberField(NumberField):
    validator_class = RealNumberValidator
    value = 0.0


enamldef ComplexNumberField(NumberField):
    validator_class = ComplexNumberValidator
    value = 0+0j


enamldef IntField(IntegralNumberField):
    validator_class = IntValidator


enamldef LongField(IntegralNumberField):
    validator_class = LongValidator
    value = 0L


enamldef FloatField(RealNumberField):
    validator_class = FloatValidator


enamldef ComplexField(ComplexNumberField):
    validator_class = ComplexValidator


enamldef BinField(IntField):
    validator_class = BinValidator


enamldef OctField(IntField):
    validator_class = OctValidator


enamldef HexField(IntField):
    validator_class = HexValidator


enamldef LongBinField(LongField):
    validator_class = LongBinValidator


enamldef LongOctField(LongField):
    validator_class = LongOctValidator


enamldef LongHexField(LongField):
    validator_class = LongHexValidator


#------------------------------------------------------------------------------
# Number Expression Fields
#------------------------------------------------------------------------------
enamldef IntegralNumberExpressionField(NumberField):
    validator_class = IntegralNumberExpressionValidator
    value = 0


enamldef RealNumberExpressionField(NumberField):
    validator_class = RealNumberExpressionValidator
    value = 0.0


enamldef ComplexNumberExpressionField(NumberField):
    validator_class = ComplexNumberExpressionValidator
    value = 0+0j


enamldef IntExpressionField(IntegralNumberExpressionField):
    validator_class = IntExpressionValidator


enamldef LongExpressionField(IntegralNumberExpressionField):
    validator_class = LongExpressionValidator
    value = 0L


enamldef FloatExpressionField(RealNumberExpressionField):
    validator_class = FloatExpressionValidator


enamldef ComplexExpressionField(ComplexNumberExpressionField):
    validator_class = ComplexExpressionValidator


enamldef BinExpressionField(IntExpressionField):
    validator_class = BinExpressionValidator


enamldef OctExpressionField(IntExpressionField):
    validator_class = OctExpressionValidator


enamldef HexExpressionField(IntExpressionField):
    validator_class = HexExpressionValidator


enamldef LongBinExpressionField(LongExpressionField):
    validator_class = LongBinExpressionValidator


enamldef LongOctExpressionField(LongExpressionField):
    validator_class = LongOctExpressionValidator


enamldef LongHexExpressionField(LongExpressionField):
    validator_class = LongHexExpressionValidator

    
#------------------------------------------------------------------------------
# Auxiliary Fields
#------------------------------------------------------------------------------
enamldef PasswordField(Field):
    password_mode = 'password'

