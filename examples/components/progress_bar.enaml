#------------------------------------------------------------------------------
#  Copyright (c) 2011, Enthought, Inc.
#  All rights reserved.
#------------------------------------------------------------------------------
""" ProgressBar component

In this example, we demonstrate connecting a ProgressBar up to a model.
This example is entirely synchronous for simplicity. The model will do 
a chunk of work when the user presses a button. A more typical use case 
would have a background thread or timer updating the work progress bar 
as work is accomplished.

"""
import random
from enaml.widgets import Window, Container, ProgressBar, Label, PushButton
from enaml.layout import hbox, vbox, spacer, align

from traits.api import HasTraits, Int


class ProgressModel(HasTraits):
    """ Model a process that does some work on command.

    """
    # The total units of work to do.
    work_units = Int(1000)

    # The number of units done.
    units_done = Int(0)

    def do_work(self):
        """ Do a random amount of work.

        """
        nunits = random.randint(10, 100)
        nunits = min(nunits, self.work_units - self.units_done)
        self.units_done += nunits

    def reset(self):
        """ Reset the work done back to 0.
        
        """
        self.units_done = 0


enamldef Main(Window):
    attr model: ProgressModel = ProgressModel()
    title = 'Progress Bar'
    Container:
        constraints = [
            vbox(progress,
                hbox(spacer, label, spacer), 
                hbox(spacer, work_button, spacer),
                spacer),
            align('h_center', progress, label, work_button),
        ]
        ProgressBar:
            id: progress
            value := model.units_done
            maximum := model.work_units
        Label:
            id: label
            text << '{0}% ({1}/{2})'.format(progress.percentage, progress.value, progress.maximum)
        PushButton:
            id: work_button
            text << "Do Some Work" if progress.percentage < 100 else "Reset"
            clicked :: 
                if progress.percentage < 100:
                    model.do_work()
                else:
                    model.reset()

