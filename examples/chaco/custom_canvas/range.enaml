#------------------------------------------------------------------------------
#  Copyright (c) 2011, Enthought, Inc.
#  All rights reserved.
#------------------------------------------------------------------------------
""" A reusable float slider component with text labels for the minimum 
and maximum.

The Range component is used by the other examples in this directory.

"""

from enaml.stdlib.fields import FloatField, IntField

def get_sliders(component):
    """ Yield all Range sliders that are descendants of the given component.

    This is useful to visually align the boundaries of many sliders in a Form::

        align('left', *get_sliders(self)),
        align('right', *get_sliders(self)),

    """
    for c in component.traverse():
        if isinstance(c, (FloatRange, IntRange)):
            yield c.slider


enamldef FloatRange(Container):
    id: range
    attr minimum: float = 0.0
    attr maximum: float = 1.0
    attr value: float = 0.5
    attr text_format: unicode = u'{0:.2f}'
    attr slider: FloatSlider = slider_
    attr field: FloatField = field_
    attr field_width: int = 50
    padding = 0.0
    constraints = [
        hbox(min_label, slider, max_label, field),
        align('v_center', min_label, slider, max_label, field),
        (field.width == field_width) | 'strong',
    ]
    Label:
        id: min_label
        text << text_format.format(minimum)
    FloatSlider:
        id: slider_
        minimum << range.minimum
        maximum << range.maximum
        value := range.value
        hug_width = 'ignore'
    Label:
        id: max_label
        text << text_format.format(maximum)
    FloatField:
        id: field_
        value := range.value
        hug_width = 'ignore'
        resist_clip_width = 'ignore'


enamldef IntRange(Container):
    id: range
    attr minimum: int = 0
    attr maximum: int = 100
    attr value: int = 50
    attr text_format: unicode = u'{0}'
    attr slider: Slider = slider_
    attr field: IntField = field_
    attr field_width: int = 50
    padding = 0.0
    constraints = [
        hbox(min_label, slider, max_label, field),
        align('v_center', min_label, slider, max_label, field),
        (field.width == field_width) | 'strong',
    ]
    Label:
        id: min_label
        text << text_format.format(minimum)
    Slider:
        id: slider_
        minimum << range.minimum
        maximum << range.maximum
        value := range.value
        hug_width = 'ignore'
    Label:
        id: max_label
        text << text_format.format(maximum)
    IntField:
        id: field_
        value := range.value
        hug_width = 'ignore'
        resist_clip_width = 'ignore'
